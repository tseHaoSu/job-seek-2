generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  modules     Module[]
  quizzes     Quiz[]

  @@map("categories")
}

model Module {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  attempt     Boolean   @default(false)
  categoryId  Int
  Category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  sections    Section[]

  @@map("modules")
}

model Section {
  id                  Int     @id @default(autoincrement())
  title               String
  moduleId            Int
  steps               Step[]
  questionText        String  @default("")
  questionAnswer      String  @default("")
  questionExplanation String  @default("")
  questionSubimage    String? @default("")
  module              Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("sections")
}

model Step {
  id        Int     @id @default(autoincrement())
  text      String
  subtext   String?
  subimage  String?
  sectionId Int
  section   Section @relation(fields: [sectionId], references: [id])

  @@map("steps")
}

model Quiz {
  id           Int        @id @default(autoincrement())
  title        String
  description  String     @default("")
  timeEstimate String     @default("5 minutes")
  categoryId   Int
  attempt      Boolean    @default(false)
  questions    Question[]
  category     Category   @relation(fields: [categoryId], references: [id])

  @@map("quizzes")
}

model Question {
  id            Int               @id @default(autoincrement())
  quizId        Int
  question      String
  correctAnswer Boolean
  explanation   String            @default("No explanation provided")
  mediaUrl      String?           @default("")
  attempts      QuestionAttempt[]
  quiz          Quiz              @relation(fields: [quizId], references: [id])

  @@map("questions")
}

model QuestionAttempt {
  id         Int      @id @default(autoincrement())
  questionId Int
  userAnswer Boolean?
  completed  Boolean  @default(false)
  timestamp  DateTime @default(now())
  question   Question @relation(fields: [questionId], references: [id])

  @@map("question_attempts")
}


model Job {
  id              Int      @id @default(autoincrement())
  created         DateTime @default(now())
  lastUpdated     DateTime @updatedAt
  timePosted      String?  // "2 months ago" format
  title           String
  description     String   @db.Text
  seniority       String?
  employmentType  String?
  location        String?
  url             String?
  externalUrl     String?
  applicantsCount String?
  salary          String?
  country         String?
  
  // Company fields embedded directly
  companyName     String?
  companyUrl      String?
  
  // Relation to job functions
  jobFunctions    JobFunction[]
}

model JobFunction {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  jobs      Job[]
}